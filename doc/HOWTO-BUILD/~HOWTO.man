.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TSTAT-HOWTO-~HOWTO 1"
.TH TSTAT-HOWTO-~HOWTO 1 "2005-06-09" "1.x" "Tstat Documentation"
.SH "Installation"
.IX Header "Installation"
This document provides basic information
for the installation, configuration and usage 
of Tstat and its optional add\-ons.
.Sh "Requirements"
.IX Subsection "Requirements"
\fIOperating System\fR
.IX Subsection "Operating System"
.PP
Tstat has been tested tested on \f(CW\*(C`Linux 2.2.x\*(C'\fR, \f(CW\*(C`2.4.x\*(C'\fR and \f(CW\*(C`2.6.x\*(C'\fR kernels, 
using \f(CW\*(C`RedHat 6.x\-9.x\*(C'\fR, and \f(CW\*(C`Fedora Core x\*(C'\fR systems. 
It should work under other \f(CW\*(C`UNIX\*(C'\fR dialects, such as 
\&\f(CW\*(C`FreeBSD\*(C'\fR, \f(CW\*(C`NetBSD 1.3\*(C'\fR and \f(CW\*(C`MAC OS X\*(C'\fR (although we don't have either of 
those platforms for testing purposes). If you are able to run Tstat on 
other OSs, we'll be happy to include them in the list.
.PP
\fISystem Libraries\fR
.IX Subsection "System Libraries"
.PP
Tstat requires, by itself, a few library that should
already be installed on your system, such as 
\&\f(CW\*(C`libpcap\*(C'\fR (available from <http://www.tcpdump.org>) 
or the \s-1DAG\s0 drivers (available from <http://www.endace.com>), 
in case you use such hardware. With these libraries, 
you are ready to capture and process the traffic flowing
in your \s-1LAN\s0.
.PP
Since Tstat uses pthread to improve the performance in case of real time
analysis, your system must support \s-1POSIX\s0 thread as well.
.PP
Finally, to use the \s-1RRD\s0 functionalities, you also need to have a working
installatin of the RRDtool (available from
<http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/>).
.PP
\fIPost-Processing\fR
.IX Subsection "Post-Processing"
.PP
Some of the additional plotting capabilities, such
as the ones used in Tstat's old web interface at
<http://tstat.tlc.polito.it/tstat.old/>, requires
Perl 5.x and some modules to be installed on your system. 
Both Perl and the required modules (namely, \f(CW\*(C`Date::Manip\*(C'\fR
and \f(CW\*(C`Compress::Zlib\*(C'\fR) are available from <http://www.cpan.org>.
With these tools, you are ready to perform additional 
post-processing  and visualize the collected dataset.
.PP
\fIRound-Robin Database\fR
.IX Subsection "Round-Robin Database"
.PP
Finally, weather you plan to use the Round-Robin Database
capabilities featured by Tstat, then you need to install
\&\f(CW\*(C`RRDtool\*(C'\fR on your system (available from
<http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/>).
Although Tstat works
with \fIany\fR version of RRDtool (we have successfully tried 
with 1.0.x and 1.2.x), you may want to download its latest 
version. With RRDtool, you are ready for extremely-scalable 
traffic monitoring and analysis.
.Sh "Installation Instructions"
.IX Subsection "Installation Instructions"
Download and uncompress the tarball. Assuming
that you want to download version \f(CW\*(C`1.x\*(C'\fR, this can be done with:
.PP
.Vb 3
\&         wget http://tstat.tlc.polito.it/download/tstat-1.x.tgz
\&         tar xzvf tstat-1.x.tgz
\&         cd tstat-1.x/
.Ve
.PP
Check the \f(CW\*(C`Makefile.in\*(C'\fR (\fIdouble check it!\fR ;\-)), choosing the correct options
you like  based on your system configurations. The changes are very simple, such
as adding or removing supported input file formats and compression tools,
toggling support for \s-1DAG\s0 (default \f(CW\*(C`off\*(C'\fR), and RRDtool (default \f(CW\*(C`off\*(C'\fR). All the
compile time options are managed via \f(CW\*(C`#define\*(C'\fR directives.  Now, run:
.PP
.Vb 1
\&        ./configure
.Ve
.PP
to generate a suitable \f(CW\*(C`Makefile\*(C'\fR. Then run:
.PP
.Vb 1
\&         make
.Ve
.PP
to produce an executable file named \f(CW\*(C`tstat\*(C'\fR.
.PP
# For instructions
#related to the Round Robin Database module installation and
#configuration, please refer to the appropriate section
#on this document.
.SH "Usage"
.IX Header "Usage"
There are few things to know to run Tstat: first, you are required to have a
knowledge  of the network that you want to monitor. 
Second, there are the few options that are described in this section.
.Sh "Synopsis"
.IX Subsection "Synopsis"
Tstat primary usage is as a command-line tool; the synopsis of 
the command is the following:
.PP
.Vb 4
\&       tstat  [-hHtuvwp] [-d[-d]] [-Nfile] [-sdir]
\&              [-rRRD_out_dir] [-Rrrd_conf] [-S]
\&              [-l] [-iinterface]
\&              [-ffilterfile] <file1 file2>
.Ve
.PP
.Vb 7
\&        -h: print this help and exit
\&        -H: print internal histograms names and definitions
\&        -t: print ticks showing the trace analysis progress
\&        -u: do not trace UDP packets
\&        -v: print version and exit
\&        -w: print [lots] of warning
\&        -p: enable multi-threaded engine (useful for live capture)
.Ve
.PP
.Vb 11
\&        -d: increase debug level (repeat to increase debug level)
\&        -Nfile: specify the file name which contains the
\&                description of the internal networks.
\&                This file must contain the subnets that will be
\&                considered as 'internal' during the analysis
\&                Each subnet must be specified using network IP address
\&                on the first line and NETMASK on the next line:
\&                130.192.0.0
\&                255.255.0.0
\&                193.204.134.0
\&                255.255.255.0
.Ve
.PP
.Vb 14
\&        -sdir: puts the trace analysis results into directory
\&               tree dir (otherwise will be <file>.out)
\&        -S: pure RRD-engine: do not create histograms and log_* files
\&        -Rconf: specify the configuration file for integration with
\&              RRDtool. See README.RRDtool for further information
\&        -rpath: path to use to create/update the RRDtool database: this
\&              should better be outside the directory tree
\&              and should be accessible from the Web server
\&              running the cgi script interface
\&        -l: enable live capture using libpcap
\&        -iinterface: specifies the interface to be used to capture traffic
\&        -ffiterfile: specifies the libpcap filter file. Syntax as in tcpdump
\&        -dag: enable live capture using Endace DAG cards. The default device for 
\&              capture is /dev/dag0 and the list of can contain at most four names
.Ve
.PP
.Vb 2
\&        file: trace file to be analyzed
\&              Use 'stdin' to read from standard input.
.Ve
.Sh "Live Capture"
.IX Subsection "Live Capture"
Tstat can sniff and analyze traffic on-line through the
use of either the \f(CW\*(C`libpcap\*(C'\fR library or \s-1DAG\s0 cards.
The usage of Tstat is very easy, especially if you have
experiences with \f(CW\*(C`tcpdump\*(C'\fR, although \f(CW\*(C`tcpdump\*(C'\fR's knowledge
is not required to profitably use Tstat.
.PP
\fIA Simple Example\fR
.IX Subsection "A Simple Example"
.PP
As a minimal configuration, you must describe your network to Tstat. Indeed, in
order to distinguish forward and backward paths, Tstat needs  to know which host
\&\s-1IP\s0 addresses can be considered as ``internal'' to the monitored network. In our
case, Politecnico di Torino internal addresses are \f(CW\*(C`130.192.0.0/16\*(C'\fR and
\&\f(CW\*(C`193.204.134.0/24\*(C'\fR, so the network description \f(CW\*(C`net.conf\*(C'\fR looks as  following:
.PP
.Vb 5
\&         bash> cat net.conf
\&         130.192.0.0
\&         255.255.0.0
\&         193.204.134.0
\&         255.255.255.0
.Ve
.PP
We can now run Tstat to capture the traffic flowing across the edge
of our network, with the following command, which must be run as \f(CW\*(C`root\*(C'\fR (as you
need to capture packets by putting the Ethernet interface in promiscuous mode).
The simplest command is the following, whose output will
be described later
.PP
.Vb 1
\&         ./tstat -l -Nnet.conf
.Ve
.PP
\fIMore Control\fR
.IX Subsection "More Control"
.PP
We can control the interface that we want to sniff as well as
the output directory name as follows:
.PP
.Vb 1
\&         ./tstat -ieth1 -l -stest -Nnet.conf
.Ve
.PP
Moreover, we can also pipe Tstat input using the special keyword
\&\f(CW\*(C`stdin\*(C'\fR as input, as in the following command (piping ns2 output to 
Tstat is left as an exercise for the reader):
.PP
.Vb 1
\&         tcpdump -s 80 -i eth0 -w - ip | ./tstat -Nnet.conf -spiped stdin
.Ve
.PP
In this case, Tstat is fed by \f(CW\*(C`tcpdump\*(C'\fR's output, and the latter has been
instructed to capture packets on the eth0 device, collecting the
first 80 bytes (to track uniquely of packet headers) of \s-1IP\s0 packets only, 
and send the output to \f(CW\*(C`stdout\*(C'\fR. Moreover, since Tstat understands 
the \f(CW\*(C`libpcap\*(C'\fR syntax, filters can be stored in text files, as in 
the following command sequence:
.PP
.Vb 2
\&         echo "vlan and ip and host 10.0.0.1" > tcpdump.conf
\&         ./tstat  -ieth0 -l -ftcpdump.conf -Nnet.conf -sfiltered
.Ve
.PP
Finally, although more informations on the \s-1RRD\s0 module configurations will
be given in section \s-1RRD\s0, here we briefly illustrate
the \fIcalling syntax\fR involving \s-1RRD\s0. 
If Tstat has been compiled with the \s-1RRD\s0 module, then it will
be possible to create an \s-1RRD\s0 database, additionally to the
aforementioned Tstat analysis, with the following command:
.PP
.Vb 1
\&         ./tstat -ieth1 -l -stest -Nnet.conf -Rrrd.conf -rlocal_dir
.Ve
.PP
where \f(CW\*(C`local_dir\*(C'\fR is the output directory where the \s-1RRD\s0 database
will be stored and \f(CW\*(C`rrd.conf\*(C'\fR tells Tstat which variables should
be added to the \s-1RRD\s0 database.
Note that, whether you plan a longer monitoring, then the output produce by
Tstat (\f(CW\*(C`log_*\*(C'\fR and the periodical histogram dump) can pose serious scalability
problems. In this case, Tstat can be run as a pure \s-1RRD\s0 engine as in the
following example, where the \s-1RRD\s0 output directory has been carefully chosen in
order to be accessible from the Web server running the \f(CW\*(C`tstat_rrd.cgi\*(C'\fR:
.PP
.Vb 1
\&         ./tstat -l -S -Nnet.conf -Rrrd.conf -r/var/www/cgi-bin/rrd_data
.Ve
.Sh "Trace Analysis"
.IX Subsection "Trace Analysis"
Beside live\-capture, it is possible to run Tstat on a previously collected 
trace file, where the trace format can be any of the following:
.PP
.Vb 8
\&        Supported Input File Formats:
\&        tcpdump          tcpdump -- Public domain program from LBL
\&        snoop            Sun Snoop -- Distributed with Solaris
\&        etherpeek        etherpeek -- Mac sniffer program
\&        netmetrix        Net Metrix -- Commercial program from HP
\&        ns               ns -- network simulator from LBL
\&        netscout         NetScout Manager format
\&        erf              Endace Extensible Record Format
.Ve
.PP
Tstat will try to read trace files given as input, and to automatically identify
the correct dump format. Trace files can be compressed or uncompressed, and
Tstat will automatically detect the compession tool used (supported formats are
\&\f(CW\*(C`compress, gzip, bzip2\*(C'\fR).
.PP
Without loss of generality, we assume to use the first of the above formats. The
calling syntax is similar to the previous one, with the exception of the absence
of the live-capture switch \f(CW\*(C`\-l\*(C'\fR and the presence of the name(s) of the file(s)
that have to be processed. For example, the following command can be used to
analyze a trace file named \f(CW\*(C`23_00_28_Jun_2000.dump.gz\*(C'\fR. Results of the analysis
will be stored in a subdir named \f(CW\*(C`trace1\*(C'\fR; as before, \f(CW\*(C`net.conf\*(C'\fR contains  the
subnet description that  will be  considered as ``internal'' during the
analysis.
.PP
.Vb 1
\&         ./tstat -strace1 -Nnet.conf 23_00_28_Jun_2000.dump.gz
.Ve
.SH "Output"
.IX Header "Output"
.Sh "Output Classification"
.IX Subsection "Output Classification"
Recall that Tstat assumes that traces are collected on a bidirectional link,
such that both data and control packets belonging to the same flow are observed;
with the help of the figures below, we will explain the different classification
of measurements used by Tstat.
.PP
Tstat identifies hosts based on its \s-1IP\s0 address. Given the description
of the internal hosts through the \f(CW\*(C`\-N\*(C'\fR command line option, Tstat
distinguishes among \fIincoming\fR, \fIoutgoing\fR and \fIlocal\fR 
measurements. Packets whose destination is an internal host and whose source is
an external host will contribute to \fIincoming\fR measurements (red arrow in the
top figure), whereas packets going
in the opposite direction will contribute to \fIoutgoing\fR measurements (green
arrow in the top figure). Finally, in
some cases it is possible that Tstat observes packets whose source and
destination hosts belongs to the internal host set: in such cases, measurements
will be classified as \fIlocal\fR (blue arrow in the top figure).
Notice that packets whose source and destination \s-1IP\s0
addresses belong to the external host set will be discarded.
For example, consider a setup in which Tstat is attached to a snoop port of a
\&\s-1LAN\s0 switch. Then Tstat will be fed by i) \fIoutgoing\fR packets going to the default gateway,
ii) \fIincoming\fR   packets coming from the default gateway,
iii) \fIlocal\fR packets.
.PP
Note that if you either do not know or do not want to distinguish between
internal, external and local hosts, you may enable the \f(CW\*(C`\-DLOG_UNKNOWN\*(C'\fR
directive when compiling Tstat. Tstat will then be less strict, but results may
be difficult to be correctly interpreted.
.PP
Considering instead the \fIrole\fR of the host that sent the packet,  statistic are
collected distinguishing between \fIclients\fR (green arrow in the bottom figure)
and \fIservers\fR (red arrow in the top figure), i.e., host
that opens a connection and and host that replies to connection request. Recall
that while \s-1TCP\s0 connections are well defined, \s-1UDP\s0 (and \s-1RTP/RTCP\s0) connection
definition is more fuzzy. In this latter case, Tstat will consider as client the
source \s-1IP\s0 address of the host that sent the first packet of that flow, while the
server will be the host identified by the destination \s-1IP\s0 address of the same
packet.
.PP
Therefore, when applicable, Tstat will keep track of measurement referring to
the same measured quantity by \fIappending\fR a specific tag  to the filename:
.ie n .IP """_out""" 4
.el .IP "\f(CW_out\fR" 4
.IX Item "_out"
outgoing: from an internal host to an external host
.ie n .IP """_in""" 4
.el .IP "\f(CW_in\fR" 4
.IX Item "_in"
incoming: from an external host to an internal host
.ie n .IP """_loc""" 4
.el .IP "\f(CW_loc\fR" 4
.IX Item "_loc"
local between two internal hosts 
.ie n .IP """_c2s""" 4
.el .IP "\f(CW_c2s\fR" 4
.IX Item "_c2s"
going from the Client to the Server
.ie n .IP """_s2c""" 4
.el .IP "\f(CW_s2c\fR" 4
.IX Item "_s2c"
going from the Server to the Client
.Sh "Output Structure"
.IX Subsection "Output Structure"
Tstat collects several network-layer as well as transport-layer meaurements,
which are described in full details in
<http://tstat.tlc.polito.it/measure.shtml>. As output, Tstat produces three
different types of measurement collections, which will be described in the
current section:
.IP "Histograms" 4
.IX Item "Histograms"
storing the \fIdistribution\fR of a given quantity during a time interval.
.IP "Round Robin Database" 4
.IX Item "Round Robin Database"
stores a configurable subset of the same quantities through the \s-1RRD\s0 interface.
.IP "Log files" 4
.IX Item "Log files"
storing a complete transport-layer \fIlog\fR of all the parameters measured.
.Sh "Output Types"
.IX Subsection "Output Types"
This section details the different \fItypes\fR of measurement collections
generated by Tstat; for detailed informations on  the specific \fImetrics\fR 
that Tstat is able to gather, please refer to  the Tstat website 
<http://tstat.tlc.polito.it/measure.shtml>.
.PP
\fIHistograms\fR
.IX Subsection "Histograms"
.PP
Histograms are generated periodically: Tstat collects all the
data during a given measurement interval defined by the \f(CW\*(C`MAX_TIME_STEP\*(C'\fR 
parameter, which is hard-coded in the \f(CW\*(C`param.h\*(C'\fR file to 5 minutes. Please, note
that changin the \f(CW\*(C`MAX_TIME_STEP\*(C'\fR parameter may affect \s-1RRD\s0 creation as well.
For examples, considering the \s-1IP\s0 packet length, Tstat updates, for
each observed \s-1IP\s0 packet, the counter of the number of observed packets with a
particular length. At the end of the measurement period, Tstat then saves
the values stored in the histogram, resets all the values, and then restarts 
the samples collection.
.PP
Considering the last example of previous section, we let:
.PP
.Vb 1
\&         ./tstat -strace1 -Nnet.conf 23_00_28_Jun_2000.dump.gz
.Ve
.PP
running for some time. The output generated by tstat consists of a directory 
tree like the following:
.PP
.Vb 27
\&        trace1
\&        `-- 08_10_13_Apr_2000.out
\&            |-- 000
\&            |   |-- addresses
\&            |   |-- flow_number
\&            |   |-- ip_len_in
\&            |   ...
\&            |   |-- udp_port_flow_dst
\&            |   `-- udp_tot_time
\&            |-- 001
\&            |   |-- addresses
\&            |   |-- flow_number
\&            |   |-- ip_len_in
\&            |   ...
\&            |   |-- udp_port_flow_dst
\&            |   `-- udp_tot_time
\&            ...
\&            |-- LAST
\&            |   |-- addresses
\&            |   |-- flow_number
\&            |   |-- ip_len_in
\&            |   ...
\&            |   |-- udp_port_flow_dst
\&            |   `-- udp_tot_time
\&            |-- log_rtp_complete
\&            |-- log_tcp_complete
\&            `-- log_tcp_nocomplete
.Ve
.IP "* Main database" 4
.IX Item "Main database"
The topmost directory is created according to the command line  option \f(CW\*(C`\-s\*(C'\fR,
which in this case is set to  \f(CW\*(C`trace1\*(C'\fR. This is inteded to be the main database
directory. 
.IP "* Trace Start Time" 4
.IX Item "Trace Start Time"
A subdir named from the timestamp of the first tracked packet is created using
the \f(CW"%H_%M_%d_%b_%Y.out"\fR (or, in a more  human readable format, 
\&\f(CW\*(C`hour_minute_day_Month_year.out/\*(C'\fR) notation. When running in live mode (\-l
option), a new directory with the name of the current tracked packet timestamp
will be created every \f(CW\*(C`DIRS*MAX_TIME_STEP\*(C'\fR time. The parameter \f(CW\*(C`DIRS\*(C'\fR is
defined in the file \f(CW\*(C`param.h\*(C'\fR as well. By default it is set to 12, so that a
new dir will be approximatively created every hour of live measurement.
.IP "* Collection Interval" 4
.IX Item "Collection Interval"
Subdirectories with increasing numbers will be crated for each measurement period;
histograms collecnote that the histograms referring to the last \fIpartial\fR time period will
be stored in the \s-1LAST\s0 subdir.
.IP "* Histogram data" 4
.IX Item "Histogram data"
Each of these \f(CW\*(C`nnn/\*(C'\fR  directories contain several histograms, one for each of 
the measured parameters,  relative to the nnn-th \f(CW\*(C`MAX_TIME_STEP\*(C'\fR time interval;
notice that the tags \f(CW\*(C`_in\*(C'\fR, \f(CW\*(C`_out\*(C'\fR, \f(CW\*(C`_loc\*(C'\fR, \f(CW\*(C`_c2s\*(C'\fR and \f(CW\*(C`_s2c\*(C'\fR
are appended to indicate the classificaiton of the observed stream.
.Sp
Histogram data are saved using simple \s-1ASCII\s0 files.
The format is simple: the first line contains a description of the
measured quantity, while the second line contains the parameters of the histograms
(minimum and maximum values, and size of each bins). The list of all
the counter index and values is then dumped. To limit the file size, the
corresponding entry is omitted if the counter is zero.
The histogram of the packet length \f(CW\*(C`ip_len_in\*(C'\fR is, e.g.:
.Sp
.Vb 7
\&     #IP packet length - incoming packets
\&     #min=0 delta=4 max=1600
\&     28 7
\&     36 277
\&     40 11760
\&     44 3463
\&     ...
.Ve
.PP
Simple \*(L"Post Processing\*(R" tools are available to automatically manage the histogram
database.
.PP
\fI\s-1RRD\s0\fR
.IX Subsection "RRD"
.PP
The \s-1RRD\s0 output consists of a series of binary files stored in the \s-1RRD\s0 format.
Tstat forces a particular \fInaming notation\fR of such files, which follows
the configuration rules described later on the \s-1RRD\s0 section.
.PP
The \s-1RRD\s0 can then be queried with the standard RRDtool commands, such as
\&\f(CW\*(C`rrdcreate\*(C'\fR, \f(CW\*(C` rrdupdate\*(C'\fR,  \f(CW\*(C` rrdgraph\*(C'\fR, \f(CW\*(C` rrddump\*(C'\fR, \f(CW\*(C` rrdfetch\*(C'\fR, 
\&\f(CW\*(C` rrdtune\*(C'\fR, \f(CW\*(C` rrdlast\*(C'\fR, \f(CW\*(C` rrdxport\*(C'\fR, to whose manual pages we refer 
the reader for further informations.
.PP
\fILogs\fR
.IX Subsection "Logs"
.PP
Tstat creates three transport-layer log\-files: \f(CW\*(C`log_tcp_complete\*(C'\fR,
\&\f(CW\*(C`log_tcp_nocomplete\*(C'\fR and \f(CW\*(C`log_rtp_complete\*(C'\fR. 
Log files are placed in directories of the main database.
.PP
\&\s-1TCP\s0 flows can be either completed or not depending whether
Tstat observed the 3\-way handshaking or not; in this last case, 
flows  considered as garbage and stored in \f(CW\*(C`log_tcp_nocomplete\*(C'\fR;
Conversely, in the \s-1RTP\s0 flow case all flows are considered completed 
since there is no handshaking.
.PP
In the \s-1TCP\s0 case, flows are dumped as they finish, i.e., therefore the 
\&\f(CW\*(C`log_tcp_*\*(C'\fR files are sorted by flow closing time; in the \s-1RTP\s0 case,
a flow is considered completed when no packet has been observed over
a given amount of time (set by default to 15 minutes).
.Sh "Post Processing"
.IX Subsection "Post Processing"
This section could be a separate \s-1HOWTO\s0, since this
argument cannot be treated exhaustively. Perl, Awk, Ruby
\&\fIYour-Favorite-Scripting-Language\fR scripts are definitively
best candidates to post-process \f(CW\*(C`log_*\*(C'\fR files.
Moreover, \s-1RRD\s0 files can be manipulated to obtain \fIindirect\fR 
metrics through the \s-1RPN\s0 manipulations mechanism provided 
by RRDtool.
.Sh "Storage Considerations"
.IX Subsection "Storage Considerations"
Just to give the user a rough idea of the size of the output,
let consider a 6 hours long, 1.6GB packet-level trace containing 
21M packets, sniffed with \f(CW\*(C`tcpdump\*(C'\fR.
Tstat observed analyzed about 729K flows, of which about 495K were 
\&\s-1TCP\s0 flows, trashing 20K of them into \f(CW\*(C`log_nocomplete\*(C'\fR.
Referring to the directory structure  early shown,
we may express the following observations:  
.IP "Logs" 4
.IX Item "Logs"
The aggregated size of the log files amount to about 200MB, which 
gives  a 8x reduction factor w.r.t. the packet-level trace; thus,
the storage cost of each flow is about 400 bytes.
.Sp
Note that the \f(CW\*(C`log_*\*(C'\fR can be further compressed, using \f(CW\*(C`gzip\*(C'\fR
to less than 50MB, which gives a further 4x size gain; 
however, for a matter of performance, is preferable 
to compress the logfiles offline.
.IP "Histogram" 4
.IX Item "Histogram"
As previously described, in order to take into account the flow directions, 
several histograms are dumped for the same variable \f(CW\*(C`var_{in,out,loc,c2s,s2c}\*(C'\fR.
Currently, about 60 measurement indexes, described in 
<http://tstat.tlc.polito.it/measure.shtml>,  are logged, for a total
of 180 files: each of the \f(CW\*(C`000/\*(C'\fR, \f(CW\*(C`001/\*(C'\fR ... \f(CW\*(C`LAST/\*(C'\fR directories is about
500KB\-1MB depending on the network traffic and on the hard-disk
geometry.
.Sp
This can be useful in order to set the periodical dump timer
to the desired tradeoff among time granularity versus storage size 
required: as a rule of thumb, you can count 1MB of storage every 5 minutes
of traffic.
.IP "\s-1RRD\s0" 4
.IX Item "RRD"
The \f(CW\*(C`rrd/\*(C'\fR directory is, per construction, of fixed size: this should
not be a surprise, since this is the goal of \s-1RRD\s0. Therefore, the size
of the database does not depend on the amount of network traffic processed,
but rather on the \s-1RRD\s0 configuration.
For the standard configuration, which is also the one used in
our Web server, the whole database occupy only 6MB and consists
of about 250 files.
.PP
Finally, consider tat on a common \s-1PC\s0 architecture (specifically,
Intel P4 2.40GHz equipped with 2GB of \s-1RAM\s0 and 7200rpm hard\-disk),
the whole trace elaboration took only 4 minutes; thus, the 
analysis rate is 85Kpkts/sec or 3Kflows/sec.
.SH "RRD Module"
.IX Header "RRD Module"
.Sh "RRDtool Installation"
.IX Subsection "RRDtool Installation"
In order to get Tstat \s-1RRD\s0 module working, you will need to
install RRDtool first (refer to the homepage of RRDtool 
<http://people.ee.ethz.ch/~oetiker/webtools/rrdtool> 
to accomplish this step). Then, make sure to specify
that you want native \s-1RRD\s0 support in Tstat and recompile: basically, you 
will have to uncomment the following lines in \f(CW\*(C`Makefile.in\*(C'\fR, and 
you will  also have to check that the RRDtool version and path 
are coherent with your system settings.
.PP
.Vb 5
\&   DEFINES    += -DHAVE_RRDTOOL
\&   RRD_VER     = 1.2.9
\&   RRD_LDLIBS  = -lrrd
\&   RRD_LDFLAGS = -L/usr/lib/ -L/usr/rrdtool/lib/  -L/usr/rrdtool-${RRD_VER}/lib/
\&   RRD_INCS    = -I/usr/rrdtool/include/ -I/usr/rrdtool-${RRD_VER}/include
.Ve
.Sh "\s-1RRD\s0 Configuration"
.IX Subsection "RRD Configuration"
\&\s-1RRD\s0 configuration is very easy and is moreover centralized
in a single text\-file, which allow to specify what quantities
of which variables should be monitored. The operating frequencies
for the \s-1RRD\s0 sampling (i.e., the parameters for the temporal 
averages) are hard-coded into \f(CW\*(C`rrdtool.h\*(C'\fR and are chosen to 
mimic \s-1MRTG\s0 behavior.
.PP
The \s-1RRD\s0 configuration file, specified through the \f(CW\*(C`\-R\*(C'\fR option 
should contain one line for each of the Tstat parameters that have 
to be integrated into a Round Robin Database. Each line allows to 
specify which statistical properties of the variable has to be tracked,
as follows:
.PP
.Vb 1
\&          tstat_var1 avg min max stdev var val:a,b,c,d idx:e,f,g,h,other prc:i,j,k
.Ve
.PP
where \f(CW\*(C`avg,min,max,stdev,var,idx,prc,other\*(C'\fR are keywords, whereas \f(CW\*(C`a,b,c,d,i,j,k\*(C'\fR 
are floating point numbers and \f(CW\*(C`e,f,g,h\*(C'\fR integer values; note that
the list of indexes (e.g., \s-1TCP\s0 ports), values (e.g., packet size)
and percentiles are comma separated. The name of the variables are
Tstat's internal ones: they can be shown by executing \f(CW\*(C`./tstat \-H\*(C'\fR,
or you can directly look into the \f(CW\*(C`000/\*(C'\fR ...  \f(CW\*(C`LAST/\*(C'\fR  directories or
you can look them up in Tstat website, specifically at <http://tstat.tlc.polito.it/measure.shtml>. 
Valid configuration lines are, e.g.:
.PP
.Vb 4
\&          #
\&          # inspect IP packet length averge, specific values and distribution
\&          #
\&          ip_len_in   avg prc:50,90,95,99 idx:40,1500,other
.Ve
.PP
.Vb 12
\&          #
\&          # TCP well known ports       
\&          #                       
\&          # 20    FTP-DATA             
\&          # 21    FTP                  
\&          # 22    SSH                  
\&          # 23    telnet               
\&          # 25    SMTP                 
\&          # 80    HTTP                 
\&          # ...                        
\&          #
\&          tcp_port_dst_in       idx:20,21,22,23,25,80,other
.Ve
.PP
.Vb 5
\&          #
\&          # good approximation of the distribution of the RTT,
\&          # taking into account only the incoming path contribution
\&          #
\&          tcp_rtt_avg_in  prc:0.1,1,5,10,25,50,75,90,95,99,99.9
.Ve
.PP
where, evidently, the lines starting with a \f(CW\*(C`#\*(C'\fR sign are treated as comments.
Our Web server is currently running with the configuration
available at <http://tstat.tlc.polito.it/download/rrd.conf>.
.PP
For each specified quantity defined in the rrd.conf file, a corresponding file
will be created.
For example, consider that the generic configuration line:
.PP
.Vb 1
\&          tstat_var avg min max stdev var val:a,b,c,d idx:e,f,g,h,other prc:i,j,k
.Ve
.PP
will produce the following files (17 in total):
.PP
.Vb 4
\&          tstat_var.{avg,min,max,stdev,var}.rrd
\&          tstat_var.val{a,b,c,d}.rrd
\&          tstat_var.idx{e,f,g,h,oth}.rrd
\&          tstat_var.prc{i,j,k}.rrd
.Ve
.Sh "Tstat \s-1RRD\s0 and the Web"
.IX Subsection "Tstat RRD and the Web"
From the Tstat web site, in the software section, you can
download the most up-to-date version of \f(CW\*(C`tstat_rrd.cgi\*(C'\fR,
which is the \s-1CGI\s0 script that renders the Web interface.
Here's some basic tips to get it working; if you wander
how to write your own graph templates, then you're probably
skilled enough to get it on your own \f(CW\*(C`:)\*(C'\fR
.PP
\fIDatabase Structure\fR
.IX Subsection "Database Structure"
.PP
The \s-1CGI\s0 scripts allow to browse on the fly the \s-1RRD\s0 database structure.
The \f(CW\*(C`rrd_data\*(C'\fR directory is the root of the tree, where each
directory contains either i) other directories (i.e., is a box) 
or ii) a RR\-database, in which case the node is a leaf and will be 
shown in the interface. In case that a directory is a plain box, it may
optionally contain some files (specifically 
{\f(CW\*(C`HEADER\*(C'\fR,\f(CW\*(C`FOOTER\*(C'\fR,\f(CW\*(C`README\*(C'\fR}.{\f(CW\*(C`html\*(C'\fR,\f(CW\*(C`txt\*(C'\fR})
that will be rendered by \f(CW\*(C`tstat_rrd.cgi\*(C'\fR. Installation 
instructions and traces descriptions are done this way by our servers
.PP
.Vb 18
\&        rrd_data/
\&         |-- Example
\&         |-- GARR
\&         |   |-- garr-live
\&         |   `-- garr-old
\&         `-- Polito
\&             |-- 2000
\&             |   |-- Apr
\&             |   |-- Jun
\&             |   |-- Jun,post155
\&             |   `-- May
\&             |-- 2001
\&             |   |-- Feb
\&             |   `-- Jan
\&             |-- 2005
\&             |   |-- Apr
\&             |   `-- Feb
\&             `-- Current
.Ve
.PP
From \f(CW\*(C`tstat_rrd.cgi\*(C'\fR itself:
.PP
.Vb 8
\&        # every rrd directory may contain a HEADER, a FOOTER and a README
\&        # files, allowing custom informations to be naturally embedded in
\&        # each of the traces ``main page'' (i.e., when no parameter has been
\&        # chosen yet).
\&        # By default, the cgi tries to load the html version (thus,
\&        # FILE.html); otherwise, tries to displays "<pre> `cat FILE` </pre>"
\&        # if such a file exists; finally, it will display a default message
\&        # held in $default{README} hardcoded in the script
.Ve
.PP
\fIWeb Configuration\fR
.IX Subsection "Web Configuration"
.PP
Basically, it is advisable to store the Tstat \s-1RRD\s0 files
everywhere you want, and then create a symbolic link 
named \f(CW\*(C`rrd_data\*(C'\fR that points to it (i.e., to the root of 
the rrd database tree). Similarly for the directory
where the rendered images should be stored (defaults to \f(CW\*(C`cgi\-bin/rrd_images\*(C'\fR)
and can be a symbolic link as well.
The names of these symbolic links can be redefined in the 
configuration section of \f(CW\*(C`tstat_rrd.cgi\*(C'\fR if needed:
.PP
.Vb 9
\&        #   ____________________________
\&        #  /                            \e
\&        # /    configuration  __________/
\&        # \e__________________/.:nonsns:.
\&        #
\&        # specify path to the root of the rrd database tree
\&        # by default, I assume there is a symbolic link in cgi-bin/
\&        # named rrd_data
\&        $RRD_DATA = 'rrd_data';
.Ve
.PP
.Vb 5
\&        # same thing for image directory
\&        # in my case, var/www/cgi-bin/rrd_images is
\&        # a symbolic link to "/var/www/html/rrd_images";
\&        # from the html browser's perspective
\&        $IMG_DIR = "rrd_images";
.Ve
.PP
\fI\s-1RRD\s0 Parameters\fR
.IX Subsection "RRD Parameters"
.PP
The \f(CW\*(C`tstat_rrd.cgi\*(C'\fR script does a lot of things automatically,
depeding on your use of the interface. Internally, this is
done trough the following parameters.
.PP
.Vb 15
\&        # dir=         the directory where the rrd files are (i.e., a specific trace)
\&        # var=         one of Tstat parameters (e.g., rtt_avg_in, ip_len_in, ...)
\&        # template=    one of (avg|stdev|idx|prc|hit), developed by applyTemplate() below
\&        # duration=    temporal window size (until end of samples)
\&        # logscale=    flag; toggle logscale
\&        # bigpic=      flag; doubles the picture size
\&        # advopt=      flag; toggle other options, such as:
\&        #   yauto=     flag; whether to use autoscaling
\&        #   ymin=      minimum yscale value
\&        #   ymax=      maximum yscale value
\&        #
\&        # NOTE: $RRD_DATA/url_param("dir")/url_param("var").rrd
\&        # should be an existent file; the script enforce this check
\&        # by automatically selecting the available templates and
\&        # neglecting the one that whould cause an error
.Ve
.SH "Author Informations"
.IX Header "Author Informations"
Marco Mellia, Assistant Professor.
<marco.mellia@polito.it>
.PP
Dario Rossi, PostDoc Researcher.
<dario.rossi@polito.it>
.PP
Telecommunication Networks Group (\s-1TNG\s0)
\&\s-1DELEN\s0, Politecnico di Torino
.SH "Licence"
.IX Header "Licence"
Copyright (c) 2001 Politecnico di Torino.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
Tstat is deeply based on \s-1TCPTRACE\s0. The authors would like to thank
Shawn Ostermann for the development of \s-1TCPTRACE\s0.
