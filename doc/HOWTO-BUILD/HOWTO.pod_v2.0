#  Tstat HOWTO                                        _ _ 
#                                           __________^\^
#\_________________________________________/.:nonsns:.\-/
#
#
# Plain Old Documentation (pod) is not as difficult as it 
# may seem at first sight. If you need some specific help,
# refer to `man perlpod`. Otherwise, here's a short list of
# all you need to know...
# 
# *) pod directives start with =tag
#         remeber to skip >1 line after each directive
#
# *) titles and sections
#            "=headN Title" is as HTML's <HN> Title </HN>
#
# *) lists and items
#           "=over N" starts indentation, "=back" ends it
#           =over 4
#           =item cat
#           =item dog
#           =back
#
# *) bold, etc.
#         B<text> 
#         bold: B<text> (as \textbf{text} or <B>text</B>)
#         code: C<text> (as \texttt{text})
#         emph: I<text> (as \emph{text})
#         link: L<url>
#
# *) escaping and special characters (can be avoided with C<< )
#           C<$a E<lt>=E<gt> $b> (explicit escaping)
#           C<< $a <=> $b >>     (texttt)
#           Z<< $a <=> $b >>     (normaltext)
#
# *) verbatim paragraphs
#          any section that begins
#
#

=pod



=begin latex


       %palatino
       \fontfamily{ppl}\selectfont


=end latex



=head1 Installation 


This document provides some basic informations
for the installation, configuration and usage 
of Tstat and its optional add-ons.



=head2 Requirements



=head3 Operating System



Tstat has been tested tested on C<Linux 2.2.x> and C<2.4.x> kernels, 
using C<RedHat 6.x>, C<7.x> and C<9.x> systems. 
Being based on  Tcptrace, it should work under C<FreeBSD 4.1>, 
C<NetBSD 1.3>, C<HP-UX> and C<IRIX> (although we don't have either of 
those platforms for testing purposes). If you are able to run Tstat on 
other OSs, we'll be happy to include them in the list.



=head3 System Libraries


Tstat requires, by itself, a few library that should
already be installed on your system, such as 
C<libpcap> (available from L<http://www.tcpdump.org>) 
or the DAG drivers (available from L<http://www.endace.org>), 
in case you use such hardware. With these libraries, 
you are ready to capture and process the traffic flowing
in your LAN.




=head3 Post-Processing


Some of the additional plotting capabilities, such
as the ones used in Tstat's old web interface at
L<http://tstat.tlc.polito.it/tstat.old/>, requires
Perl 5.x and some modules to be installed on your system. 
Both Perl and the required modules (namely, C<Date::Manip>
and C<Compress::Zlib>) are available from L<http://www.cpan.org>.
With these tools, you are ready to perform additional 
post-processing  and visualize the collected dataset.



=head3 Round-Robin Database


Finally, weather you plan to use the Round-Robin Database
capabilities featured by Tstat, then you need to install
C<RRDtool> on your system. Although Tstat is able of working 
with I<any> version of RRDtool (we have successfully tried 
with 1.0.x and 1.2.x), you may want to download its latest 
version. With RRDtool, you are ready for extremely-scalable 
traffic logging and analysis.





=head2 Installation Instructions


Download and uncompress the tarball. Assuming
that you want to download version C<1.x>, this can be done with:

         wget http://tstat.tlc.polito.it/download/tstat-1.x.tgz
         tar xzvf tstat-1.x.tgz
         cd tstat-1.x/


Check the C<Makefile.in>, choosing the correct options you like 
based on your system configurations. The changes are very simple,
such as toggling support for DAG (default C<off>), thread (default C<on>)
and RRDtool (default C<off>). Now, run:


        ./configure 


to generate a suitable C<Makefile>. Then run:


         make


to produce an executable file named C<tstat>. For instructions
related to the Round Robin Database module installation and
configuration, please refer to the L<appropriate section|"RRD Module">
on this document.







=head1 Usage



There are just a few things needed to know in order to 
run Tstat: first, you are required to have a knowledge 
of the network that you want to observe. 
Secondly, there are the few options that are described 
in this section.


=head2 Synopsis


Tstat primary usage is as a command-line tool; the synopsis of 
the command is the following:

       tstat  [-hHtuvwp] [-d[-d]] [-Nfile] [-sdir]
              [-rRRD_out_dir] [-Rrrd_conf] [-S]
              [-l] [-iinterface]
              [-dag device_name device_name ...]
              [-ffilterfile] <file1 file2>

        -h: print this help and exit
        -H: print internal histograms names and definitions
        -t: print ticks showing the trace analysis progress
        -u: do not trace UDP packets
        -v: print version and exit
        -w: print [lots] of warning
        -p: enable multi-threaded engine (useful for live capture)

        -d: increase debug level (repeat to increase debug level)
        -Nfile: specify the file name which contains the
                description of the internal networks.
                This file must contain the subnets that will be
                considered as 'internal' during the analysis
                Each subnet must be specified using IP address
                on the first line and NETMASK on the next line:
                130.192.0.0
                255.255.0.0
                193.204.134.0
                255.255.255.0

        -sdir: puts the trace analysis into directory
               tree dir (otherwise will be <file>.out)
        -S: pure RRD-engine: do not create histograms and log_* files
        -Rconf: specify the configuration file for integration with
              RRDtool. See README.RRDtool for further information
        -rpath: path to use to create/update the RRDtool database: this
              should better be outside the directory tree
              and should be accessible from the Web server
        -l: enable live capture using libpcap
        -iinterface: specifies the interface to be used to capture traffic
        -dag: enable live capture using Endace DAG cards. The default device for 
              capture is /dev/dag0 and the list of can contain at most four names
        -ffiterfile: specifies the libpcap filter file. Syntax as in tcpdump

        file: trace file to be analyzed
              Use 'stdin' to read from standard input.



=head2 Live Capture


Tstat can sniff and analyze traffic on-line through the
use of either the C<libpcap> library or DAG cards.
The usage of Tstat is very easy, especially if you have
experiences with C<tcpdump>, although C<tcpdump>'s knowledge
is not required to profitably use Tstat.


=head3 A Simple Example


As a minimal configuration, you must describe your network to Tstat.
Indeed, in order to distinguish forward and backward paths, Tstat needs 
to know which addresses can be considered as ``internal'' to our network.
In our case, Politecnico di Torino internal addresses are C<130.192.0.0/16>
and C<193.204.134.0/24>, so the network description C<net.conf> looks as 
following:


         bash> cat net.conf
         130.192.0.0
         255.255.0.0
         193.204.134.0
         255.255.255.0


We may now run Tstat to capture the traffic flowing across the edge
of our network, with the following command, which must be run as C<root>.
The simplest command you can type is the following, whose output will
be described L<later|"Output">


         ./tstat -l -Nnet.conf



=head3 More Control

                
We can control the interface that we want to sniff as well as
the output directory name as follows:


         ./tstat -ieth1 -l -stest -Nnet.conf


Moreover, we can also pipe Tstat input using the special keyword
C<stdin> as input, as in the following command (piping ns2 output to 
Tstat is left as an exercise for the reader):


         tcpdump -s 80 -i eth0 -w - ip | ./tstat -Nnet.conf -spiped stdin


In this case, Tstat is fed by C<tcpdump>'s output, and the latter has been
instructed to capture packets on the eth0 device, collecting the
first 80 bytes (to keep track uniquely of the headers) of IP packets only, 
and send the output to C<stdout>. Moreover, since Tstat is able to understand 
the C<libpcap> syntax, filters can be stored in text files, as in 
the following command sequence:


         echo "vlan and ip and host 10.0.0.1" > tcpdump.conf
         ./tstat  -l -ftcpdump.conf -Nnet.conf -sfiltered


Finally, although more informations on the RRD module configurations will
be given on subsequent sections, here we briefly illustrate
the I<calling syntax> involving RRD. 
If Tstat has been compiled with the RRD module, then it will
be possible to create an RRD database, additionally to the
aforementioned Tstat analysis, with the following command:


         ./tstat -ieth1 -l -stest -Nnet.conf -Rrrd.conf -rlocal_dir


where C<local_dir> is the output directory where the RRD database
will be stored and C<rrd.conf> tells Tstat which variables should
be added to the RRD database.
However, whether you plan a longer monitoring, then the C<log_*>
and the periodical histogram dump can pose serious scalability problems.
In this case, Tstat can be run as a pure RRD engine as in the following
command, where the RRD output directory has been carefully chosen 
in order to be accessible from the Web -- similarly to what our Web
server is actually running:


         ./tstat -l -S -Nnet.conf -Rrrd.conf -r/var/www/cgi-bin/rrd_data



=head2 Trace Analysis


Beside live-capture, it is possible to run Tstat on a previously collected 
trace file, where the trace format can be any of the following:


        tcpdump          tcpdump -- Public domain program from LBL
        snoop            Sun Snoop -- Distributed with Solaris
        etherpeek        etherpeek -- Mac sniffer program
        netmetrix        Net Metrix -- Commercial program from HP
        ns               ns -- network simulator from LBL
        netscout         NetScout Manager format
        erf              Endace Extensible Record Format
         

Without loss of generality, we assume to use the first of the above formats.
The calling syntax is almost as before, with the exception of the absence
of the live-capture switch C<-l> and the presence of the name(s) of the file(s)
that have to be processed.
For example, the following command can be used to analyze the 
C<23_00_28_Jun_2000.dump.gz> trace, producing a subdir named C<trace1>, where 
the output of the trace analysis will be stored; as before, C<net.conf> contains 
the subnets that  will be  considered as ``internal'' during the analysis.


         ./tstat -stest -Nnet.conf 23_00_28_Jun_2000.dump.gz





=head1 RRD Module



=head2 RRDtool Installation


In order to get Tstat RRD module working, you will need to
install RRDtool first (refer to the homepage of RRDtool 
L<http://people.ee.ethz.ch/~oetiker/webtools/rrdtool> 
to accomplish this step). Then, make sure to specify
that you want native RRD support in Tstat and recompile: basically, you 
will have to uncomment the following lines in C<Makefile.in>, and 
you will  also have to check that the RRDtool version and path 
are coherent with your system settings.


   DEFINES    += -DHAVE_RRDTOOL
   RRD_VER     = 1.2.9
   RRD_LDLIBS  = -lrrd
   RRD_LDFLAGS = -L/usr/lib/ -L/usr/rrdtool/lib/  -L/usr/rrdtool-${RRD_VER}/lib/
   RRD_INCS    = -I/usr/rrdtool/include/ -I/usr/rrdtool-${RRD_VER}/include




=head2 RRD Configuration


RRD configuration is very easy and is moreover centralized
in a single text-file, which allow to specify what quantities
of which variables should be monitored. The operating frequencies
for the RRD sampling (i.e., the parameters for the temporal 
averages) are hard-coded into C<rrdtool.h> and are chosen to 
mimic MRTG behavior.

The RRD configuration file, specified through the C<-R> option 
should contain one line for each of the Tstat parameters that have 
to be integrated into a Round Robin Database. Each line allows to 
specify which statistical properties of the variable has to be tracked,
as follows:


          tstat_var1 avg min max stdev var val:a,b,c,d idx:e,f,g,h,other prc:i,j,k


where C<avg,min,max,stdev,var,idx,prc,other> are keywords, whereas C<a,b,c,d,i,j,k> 
are floating point numbers and C<e,f,g,h> integer values; note that
the list of indexes (e.g., TCP ports), values (e.g., packet size)
and percentiles are comma separated. The name of the variables are
Tstat's internal ones: they can be shown by executing C<./tstat -H>,
or you can directly look into the C<000/> ...  C<LAST/>  directories or
you can look them up in Tstat website, specifically at L<http://tstat.tlc.polito.it/measure.shtml>. 
Valid configuration lines are, e.g.:

          #
          # inspect IP packet length averge, specific values and distribution
          #
          ip_len_in   avg prc:50,90,95,99 idx:40,1500,other

          #
          # TCP well known ports       
          #                       
          # 20    FTP-DATA             
          # 21    FTP                  
          # 22    SSH                  
          # 23    telnet               
          # 25    SMTP                 
          # 80    HTTP                 
          # ...                        
          #
          tcp_port_dst_in       idx:20,21,22,23,25,80,other          

          #
          # good approximation of the distribution of the RTT,
          # taking into account only the incoming path contribution
          #
          tcp_rtt_avg_in  prc:0.1,1,5,10,25,50,75,90,95,99,99.9


where, evidently, the lines starting with a C<#> sign are treated as comments.
Our Web server is currently running with the configuration
available at L<http://tstat.tlc.polito.it/download/rrd.conf>.



=head2 Tstat RRD and the Web 


From the Tstat web site, in the software section, you can
download the most up-to-date version of C<tstat_rrd.cgi>,
which is the CGI script that renders the Web interface.
Here's some basic tips to get it working; if you wander
how to write your own graph templates, then you're probably
skilled enough to get it on your own C<:)>


=head3 Database Structure


The CGI scripts allow to browse on the fly the RRD database structure.
The C<rrd_data> directory is the root of the tree, where each
directory contains either i) other directories (i.e., is a box) 
or ii) a RR-database, in which case the node is a leaf and will be 
shown in the interface. In case that a directory is a plain box, it may
optionally contain some files (specifically 
{C<HEADER>,C<FOOTER>,C<README>}.{C<html>,C<txt>})
that will be rendered by C<tstat_rrd.cgi>. Installation 
instructions and traces descriptions are done this way by our servers



        rrd_data/
         |-- Example
         |-- GARR
         |   |-- garr-live
         |   `-- garr-old
         `-- Polito
             |-- 2000
             |   |-- Apr
             |   |-- Jun
             |   |-- Jun,post155
             |   `-- May
             |-- 2001
             |   |-- Feb
             |   `-- Jan
             |-- 2005
             |   |-- Apr
             |   `-- Feb
             `-- Current
         


From C<tstat_rrd.cgi> itself:


        # every rrd directory may contain a HEADER, a FOOTER and a README
        # files, allowing custom informations to be naturally embedded in
        # each of the traces ``main page'' (i.e., when no parameter has been
        # chosen yet).
        # By default, the cgi tries to load the html version (thus,
        # FILE.html); otherwise, tries to displays "<pre> `cat FILE` </pre>"
        # if such a file exists; finally, it will display a default message
        # held in $default{README} hardcoded in the script
        



=head3 Web Configuration


Basically, it is advisable to store the Tstat RRD files
everywhere you want, and then create a symbolic link 
named C<rrd_data> that points to it (i.e., to the root of 
the rrd database tree). Similarly for the directory
where the rendered images should be stored (defaults to C<cgi-bin/rrd_images>)
and can be a symbolic link as well.
The names of these symbolic links can be redefined in the 
configuration section of C<tstat_rrd.cgi> if needed:


        #   ____________________________
        #  /                            \
        # /    configuration  __________/
        # \__________________/.:nonsns:.
        #
        # specify path to the root of the rrd database tree
        # by default, I assume there is a symbolic link in cgi-bin/
        # named rrd_data
        $RRD_DATA = 'rrd_data';

        # same thing for image directory
        # in my case, var/www/cgi-bin/rrd_images is
        # a symbolic link to "/var/www/html/rrd_images";
        # from the html browser's perspective
        $IMG_DIR = "rrd_images";



=head3 RRD Parameters


The C<tstat_rrd.cgi> script does a lot of things automatically,
depeding on your use of the interface. Internally, this is
done trough the following parameters.


        # dir=         the directory where the rrd files are (i.e., a specific trace)
        # var=         one of Tstat parameters (e.g., rtt_avg_in, ip_len_in, ...)
        # template=    one of (avg|stdev|idx|prc|hit), developed by applyTemplate() below
        # duration=    temporal window size (until end of samples)
        # logscale=    flag; toggle logscale
        # bigpic=      flag; doubles the picture size
        # advopt=      flag; toggle other options, such as:
        #   yauto=     flag; whether to use autoscaling
        #   ymin=      minimum yscale value
        #   ymax=      maximum yscale value
        #
        # NOTE: $RRD_DATA/url_param("dir")/url_param("var").rrd
        # should be an existent file; the script enforce this check
        # by automatically selecting the available templates and
        # neglecting the one that whould cause an error






=head1 Output


=head2 Directionality Considerations


Recall that Tstat assumes that traces are collected on a bidirectional link,
such that both data and control packets belonging to the same flow are observed;
with the help of the figures below, we will develop some considerations on
flow directionality.


=begin text


                                       out
                  +---------------------+    
                  | +-----------------+ |
                  | | +-+          in | |
         	  | | | | loc	      | |
         	  v | v v	      v |
         	    
         	 internal           external  
         	 addresses	    addresses
         	 

         	 
           				s2c
                  +---------------------+    
                  | +-----------------+ |
                  | | c2s             | |
         	  | |   	      | |
         	  v |   	      v |
       
                 client		    server 


=end text





=begin html


         <center><img src="/HOWTO/tstat_output.png"></img></center>


=end html



=begin latex



         \begin{figure}[!htb]
             \begin{center}
                 \includegraphics[width=0.6\textwidth]{tstat_output.eps}
             \end{center}
         \end{figure}



=end latex




Tstat identifies hosts based on its IP address. Given the description
of the internal hosts through the C<-N> command line option, Tstat
distinguishes among I<incoming>, I<outgoing> and I<local> 
measurements. Packets whose destination is an internal host and whose source is
an external host will contribute to I<incoming> measurements, whereas packets going
in the opposite direction will contribute to I<outgoing> measurements. Finally, in
some cases it is possible that Tstat observes packets whose source and
destination hosts belongs to the internal host set: in such cases, measurements
will be classified as I<local>. Notice that packets whose source and destination IP
addresses belong to the external host set will be discarded.
For example, consider a setup in which Tstat is attached to a snoop port of a
LAN switch. Then Tstat will be fed by i) I<outgoing> packets going to the default gateway,
ii) I<incoming>   packets coming from the default gateway,
iii) I<local> packets.


Considering instead the I<role> of the host that sent the packet,  statistic are
collected distinguishing between I<clients> and I<servers>, i.e., host
that opens a connection and and host that replies to connection request. Recall
that while TCP connections are well defined, UDP (and RTP/RTCP) connection
definition is more fuzzy. In this latter case, Tstat will consider as client the
source IP address of the host that send the first packet of that flow, while the
server will be the host identified by the destination IP address of the same
packet.




Therefore, when applicable, Tstat will keep track of measurement referring to
the same measured quantity by appending a specific tag  to the filename:

=over 4

=item C<_out>

outgoing: from an internal host to an external host

=item C<_in> 

incoming: from an external host to an internal host

=item C<_loc>

local between two internal hosts 

=item C<_c2s>

going from the Client to the Server

=item C<_s2c>

going from the Server to the Client


=back




=head2 Directory Structure



Tstat collects several network-level as well as flow-level parameters,
which are described in full details in L<http://tstat.tlc.polito.it/measure.shtml>.
As output, Tstat produces three different types of measurement collections,
which will be described in the current section:



=over 4

=item Histograms 

storing the distribution of a given quantity during a time interval.

=item Round Robin Database 

stores the same quantities, but uses the RRD interface.

=item Log files 

storing a complete transport-level log of all the parameters measured.

=back


If we let the capture process:


        ./tstat -l -Nnet.conf -Rrrd.conf -rrrd


running for some time, we'll obtain a directory  tree like the following:


        `-- 17_29_06_Jun_2005.out            
            |-- 000
            |   |-- addresses
            |   |-- flow_control_c2s
            |   |-- flow_control_s2c
            ...
            |   |-- unnecessary_rtx_RTO_local
            |   `-- unnecessary_rtx_RTO_out
            |-- 011
            |   |-- addresses
            |   |-- flow_control_c2s
            ...
            |   |-- unnecessary_rtx_RTO_local
            |   `-- unnecessary_rtx_RTO_out
            |-- LAST
            |   |-- addresses
            |   |-- flow_control_c2s
            ...
            |   |-- unnecessary_rtx_RTO_local
            |   `-- unnecessary_rtx_RTO_out
            |-- rrd             
            |   |-- flow_number.idx0.rrd
            ...
            |   `-- tcp_tot_time.stdev.rrd
            |
            |-- log_tcp_complete
            |-- log_tcp_nocomplete
            `-- log_rtp_complete



The topmost directory is created according to the command line 
option C<-s>, which in this case defaults to the current directory C<./>
In live-capture mode, Tstat will create several subdirectories
named after the capture time C<"%H_%M_%d_%b_%Y.out"> (or, in a more 
human readable format,  C<hour_minute_day_Month_year.out/>); such directories 
are created every C<DIRS*MAX_TIME_STEP>, or every hour by default.
Conversely, when a tracefile is analyzed, only the first subdirectory
will be created.


=head2 Output Types


This section details the different I<types> of measurement collections
generated by Tstat; for detailed informations on  the specific I<metrics> 
that Tstat is able to gather, please refer to  the Tstat website 
L<http://tstat.tlc.polito.it/measure.shtml>.


=head3 Histograms


=for html <a name="histo"></a>


Histograms are generated periodically: Tstat collect all the
data during a given measurement interval defined by the C<MAX_TIME_STEP> 
parameter, which is hard-coded in the C<param.h> file to 5 minutes.
For examples, considering the IP packet length, Tstat updates, for
each observed IP packet, the counter of the number of observed packets with a
particular length. At the end of the measurement period, Tstat then saves
the values stored in the histogram, resets all the values, and then restarts 
the samples collection.


Each histogram database consists of simple ASCII files, stored in the simple
directory structure shown earlier in this section, which has the following
properties:


=over 4


=item *


Subdirectories with increasing numbers will be crated for each measurement period;
note that the histograms referring to the last I<partial> time period will
be stored in the LAST subdir.


=item *


Each of these C<nnn/>  directories contain several histograms, one for each of 
the measured parameters,  relative to the i-th C<MAX_TIME_STEP> time interval;
notice that the tags C<_in>, C<_out>, C<_loc>, C<_c2s> and C<_s2c>
are appended to indicate the direction of the observed stream.


=item *

In each C<nnn/>  subdirectory, ASCII files storing all the collected histograms will be
created. The format is simple: the first line contains a description of the
measured quantity, while the second line contains the parameters of the histograms
(minimum and maximum values, and delta values of the bin size). The list of all
the counter index and values is then dumped. To limit the file size, the
corresponding entry is omitted if the corresponding counter is zero.
The histogram of the packet length C<ip_len_in> is, e.g.:

     #IP packet length - incoming packets
     #min=0 delta=4 max=1600
     28 7
     36 277
     40 11760
     44 3463
     ...

=item *

A subdir named from the timestamp of the first tracked packet is created.
When running in live mode, a new directory with the name of the last tracked 
packet timestamp will be created every  C<DIRS*MAX_TIME_STEP> time. 
The parameter C<DIRS> is defined in the file C<param.h> as well. 
By default it is set to 12, so that a new dir will be
created every hour of live measurement.

=back




=head3 Logs 


=for html <a name="logs"></a>


Tstat creates three flow-level log-files: C<log_tcp_complete>,
C<log_tcp_nocomplete> and C<log_rtp_complete>. 
Log files, exactly as it happens for histograms 
are placed in directories named after the capture time
C<"%H_%M_%d_%b_%Y.out"> (or, in a more human readable format, 
C<hour_minute_day_Month_year.out/>); such directories are
created every C<DIRS*MAX_TIME_STEP>, or one hour by default.

TCP flows can be either completed or not depending whether
Tstat observed the 3-way handshaking or not; in this last case, 
flows  considered as garbage and stored in C<log_tcp_nocomplete>;
Conversely, in the RTP flow case all flows are considered completed 
since there is no handshaking.

In the TCP case, flows are dumped as they finish, i.e., therefore the 
C<log_tcp_*> files are sorted by flow closing time; in the RTP case,
a flow is considered completed when no packet has been observed over
a given amount of time (set by default to 15 minutes).



=head3 RRD


=for html <a name="rrd"></a>


The RRD output consists of a series of binary files stored in the RRD format.
Tstat impose a rule on the I<naming notation> of such files, which follows
the configuration rules described early on the L<RRD section|"RRD Configuration">.
To recall these rules, consider that the generic configuration line:


          tstat_var avg min max stdev var val:a,b,c,d idx:e,f,g,h,other prc:i,j,k


will produce the following files (17 in total):


          tstat_var.{avg,min,max,stdev,var}.rrd
          tstat_var.val{a,b,c,d}.rrd
          tstat_var.idx{e,f,g,h,oth}.rrd
          tstat_var.prc{i,j,k}.rrd


The RRD can then be queried with the standard RRDtool commands, such as
C<rrdcreate>, C< rrdupdate>,  C< rrdgraph>, C< rrddump>, C< rrdfetch>, 
C< rrdtune>, C< rrdlast>, C< rrdxport>, to whose manual pages we refer 
the reader for further informations.




=head2 Storage Considerations


Just to give the user a rough idea of the size of the output,
let consider a 6 hours long, 1.6GB packet-level trace containing 
21M packets, sniffed with C<tcpdump>.
Tstat observed analyzed about 729K flows, of which about 495K were 
TCP flows, trashing 20K of them into C<log_nocomplete>.
Referring to the L<directory structure |"Directory Structure"> early shown,
we may express the following observations:  


=over 4

=item Logs

The aggregated size of the log files amount to about 200MB, which 
gives  a 8x reduction factor w.r.t. the packet-level trace; thus,
the storage cost of each flow is about 400 bytes.

Note that the C<log_*> can be further compressed, using C<gzip>
to less than 50MB, which gives a further 4x size gain; 
however, for a matter of performance, is preferable 
to compress the logfiles offline.


=item Histogram

As previously described, in order to take into account the flow directions, 
several histograms are dumped for the same variable C<var_{in,out,loc,c2s,s2c}>.
Currently, about 60 measurement indexes, described in 
L<http://tstat.tlc.polito.it/measure.shtml>,  are logged, for a total
of 180 files: each of the C<000/>, C<001/> ... C<LAST/> directories is about
500KB-1MB depending on the network traffic and on the hard-disk
geometry.

This can be useful in order to set the periodical dump timer
to the desired tradeoff among time granularity versus storage size 
required: as a rule of thumb, you can count 1MB of storage every 5 minutes
of traffic.


=item RRD

The C<rrd/> directory is, per construction, of fixed size: this should
not be a surprise, since this is the goal of RRD. Therefore, the size
of the database does not depend on the amount of network traffic processed,
but rather on the RRD configuration.
For the standard configuration, which is also the one used in
our Web server, the whole database occupy only 6MB and consists
of about 250 files.


=back


Finally, consider tat on a common PC architecture (specifically,
Intel P4 2.40GHz equipped with 2GB of RAM and 7200rpm hard-disk),
the whole trace elaboration took only 4 minutes; thus, the 
analysis rate is 85Kpkts/sec or 3Kflows/sec.




=head1 Author Informations



Marco Mellia, Assistant Professor.
<marco.mellia@polito.it>



Dario Rossi, PostDoc Researcher.
<dario.rossi@polito.it>



Telecommunication Networks Group (TNG)
DELEN, Politecnico di Torino





=head1 Licence



Copyright (c) 2001 Politecnico di Torino.  All rights reserved.

 
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.


Tstat is deeply based on TCPTRACE. The authors would like to thank
Shawn Ostermann for the development of TCPTRACE.


=cut
