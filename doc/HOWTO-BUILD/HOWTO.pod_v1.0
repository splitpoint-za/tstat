#  Tstat HOWTO                                        _ _ 
#                                           __________^\^
#\_________________________________________/.:nonsns:.\-/
#
#
# Plain Old Documentation (pod) is not as difficult as it 
# may seem at first sight. If you need some specific help,
# refer to `man perlpod`. Otherwise, here's a short list of
# all you need to know...
# 
# *) pod directives start with =tag
#	remeber to skip >1 line after each directive
#
# *) titles and sections
#	   "=headN Title" is as HTML's <HN> Title </HN>
#
# *) lists and items
# 	 "=over N" starts indentation, "=back" ends it
# 	 =over 4
# 	 =item cat
# 	 =item dog
# 	 =back
#
# *) bold, etc.
#	B<text> 
#	bold: B<text> (as \textbf{text} or <B>text</B>)
#	code: C<text> (as \texttt{text})
#	emph: I<text> (as \texttt{text})
#	link: L<url>
#
# *) escaping and special characters (can be avoided with C<< )
#           C<$a E<lt>=E<gt> $b> (explicit escaping)
#           C<< $a <=> $b >>     (texttt)
#           Z<< $a <=> $b >>     (normaltext)
#
# *) verbatim paragraphs
# 	any section that begins
#
#

=pod


=head1 Tstat Installation 


This document provides some basic informations
for the installation, configuration and usage 
of Tstat and its optional add-ons.


=head2 Requirements


=head3 Operating System


Tstat has been tested tested on C<Linux 2.2.x> and C<2.4.x> kernels, 
using C<RedHat 6.x>, C<7.x> and C<9.x> systems. 
Being based on  Tcptrace, it should work under C<FreeBSD 4.1>, 
C<NetBSD 1.3>, C<HP-UX> and C<IRIX> (although we don't have either of 
those platforms for testing purposes). If you are able to run Tstat on 
other OSs, we'll be happy to include them in the list.



=head3 System Libraries


Tstat requires, by itself, a few library that should
already be installed on your system, such as 
C<libpcap> (available from L<http://www.tcpdump.org>) 
or the DAG drivers (available from L<http://www.endace.org>), 
in case you use such hardware. With these libraries, 
you are ready to capture and process the traffic flowing
in your LAN.




=head3 Post-Processing


Some of the additional plotting capabilities, such
as the ones used in Tstat's old web interface at
L<http://tstat.tlc.polito.it/tstat.old/>, requires
Perl 5.x and some modules to be installed on your system. 
Both Perl and the required modules (namely, C<Date::Manip>
and C<Compress::Zlib>) are available from L<http://www.cpan.org>.
With these tools, you are ready to peform additional 
post-processing  and visualize the collected dataset.



=head3 Round-Robin Database


Finally, wether you plan to use the Round-Robin Database
capabilities featured by Ttstat, then you need to install
C<RRDtool> on your system. Altough Tstat is able of working 
with I<any> version of RRDtool (we have succesfully tried 
with 1.0.x and 1.2.x), you may want to download its latest 
version. With RRDtool, you are ready for extremely-scalable 
traffic logging and analysis.





=head2 Installation Instructions


Download and uncompress the tarball. This can be done with:

	tar xzvf tstat-1.x.tgz

Check the C<Makefile.in>, choosing the correct options you like 
based on your system configurations. The changes are very simple,
such as toggling support for DAG (default B<off>), thread (default B<on>)
and RRDtool (default B<off>). Now, run:

	./configure

to generate a suitable C<Makefile>. Then run:

	make

to produce an executable file named B<tstat>.
For further instructions on Tstat I<configuration> and I<usage> 
examples, please refer to the other tutorials available on the 
Tstat website.





=head1 Examples of Use 

There are just a few things needed to know in order to 
run Tstat: first, you are required to have a knowledge 
of the network that you want to observe. 
Secondly, there are the few options that are decribed 
in this section.


=head2 Usage Synopsis

Tstat primary usage is as a command-line tool; the synopsis of 
the command is the following:


	tstat [-Nfile] [-d n] [-htuvw] [-sdir]
              [-l] [-iinterface] [-ffilterfile] <file1 file2>
              [-dag device_name device_name ...]  

        -Nfile: specify the file name which contains the
                description of the internal networks.
                This file must contain the subnets that will be
                considered as 'internal' during the analyisis
                Each subnet must be specified using IP address
                on the first line and netmask on the second one:
                130.192.0.0
                255.255.0.0
                193.204.134.0
                255.255.255.0

        -d: increase debug level (repeat to increase debug level)
        -h: print this help and exit
        -H: print insternal histograms names and definitions
        -t: print ticks showing the trace analysis progress
        -u: do not trace UDP packets
        -v: print version and exit
        -w: print [lots] of warning
        -p: enable multi-threaded engine (useful for live capture)
        -l: enable live capture using libpcap
        -iiface: specifies the interface to be used to capture traffic
        -ffile: specifies the libpcap filter file, using tcpdump syntax
   
        -dag: enable live capture usign Endace DAG cards; the default 
	      device for capture is /dev/dag0 and the device names list 
	      can contain at most four names 
	      
       -S: pure rrd-engine: do not create histograms and log_ files 
       -Rconf: specify the configuration file for integration with 
               RRDTools. See README.rrdtools for further information
       -rpath: path to use to create/update the RRDTool database: 
       	       this should better be outside the directory tree
               and should be accessible from the Web server

       -sdir: puts the trace analysis into directory
               tree dir (otherwise will be <file>.out)
        file: trace file to be analyzed
              Use 'stdin' to read from standard input.
              Useful to allow on-line capture and processing.




=head2 Live Capture



=head3 A Simple Example


As a minimal configuration, you must describe your network to Tstat.
Indeed, in order to distinguish forward and backward paths, Tstat needs 
to know which addresses can be considered as ``internal'' to our network.
In our case, Politecnico di Torino internal addresses are C<130.192.0.0/16>
and C<193.204.134.0/24>, so the network description C<net.conf> looks as 
following:

	 bash> cat net.conf
         130.192.0.0
         255.255.0.0
         193.204.134.0
         255.255.255.0


We may now run Tstat to capture the traffic flowing across the edge
of our network, with the following command, which must be run as C<root>.

	./tstat -l -Nnet.conf


If we let the capture process running for some time, we'll obtain a directory 
tree like the following:


    `-- 17_29_06_Jun_2005.out
        |-- 000
        |   |-- addresses
        |   |-- flow_control_a2b
	            ...
        |   |-- unnecessary_rtx_RTO_local
        |   `-- unnecessary_rtx_RTO_out
        |-- LAST
        |   |-- addresses
        |   |-- flow_control_a2b
	            ...
        |   |-- unnecessary_rtx_RTO_local
        |   `-- unnecessary_rtx_RTO_out
        |-- log_complete
        |-- log_nocomplete
        `-- log_rtp_complete


The first item is a directory, named after the time instant 
C<hour_minute_day_Month_year.out/> when the capture started.
This directory, in our case C<17_29_06_Jun_2005.out/> contains
several flow-level logs, which can be either TCP (default) or RTP flows
(C<_rtp>); moreover, and flows may be completed (C<_complete>) or not, 
in which case they are considered as garbage and stored in C<_nocomplete> 
logs; notice that flows are logged the time they finish, so the C<log_*> files
are sorted by flow closing time. 

Moreover, C<17_29_06_Jun_2005.out/> contains several subdirectories, 
named from C<000/> to C<LAST/>, that are dumped on a periodical basis
(specifically, C<MAX_TIME_STEP> hard-coded in C<param.h>). Each of these
directories contain several histograms, one for each of the measured 
parameters,  relative to the last C<MAX_TIME_STEP> time interval;
notice that the tags C<_in>, C<_out>, C<_local>, C<_a2b> and C<_b2a>
are appended to indicate the direction of the observed stream.
For further (and more detailed) informations on the specific
metrics that Tstat is able to gather, please refer to 
the Tstat website.



=head3 More Control

                
We can control the interface that we want to sniff as well as
the output directory name as follows:

	./tstat -ieth1 -l -stest -Nnet.conf


Moreover, we can also pipe Tstat input using the special keyword
C<stdin> as input, as in the follwing command (piping ns2 output to 
Tstat is left as an exercise for the reader):

	tcpdump -s 80 -i eth0 -w - ip | ./tstat -Nnet.conf -spiped stdin


In this case, Tstat is fed of tcpdump's output, and the latter has been
instructed to capture packets on the eth0 device, collecting the
first 80 bytes (to keep track uniquely of the headers) of IP packets only, 
and send the output to stdout. However, since Tstat is able to understand 
the Tcpdump syntax, filters can be stored in text files; for example,
the following command sequence is equivalent to the previous pipe:

	echo "-s 80 -i eth0 -w - ip" > tcpdump.conf
	./tstat  -l -ftcpdump.conf -Nnet.conf -sfilered



Finally, although more informations on Tstat+RRD configurations will
be given on subsequent sections, here we briefly illustrate
the I<calling syntax> involving RRD. 
If Tstat has been compiled with the RRD module, then it will
be possible to create an RRD database, additionally to the
aforementioned Tstat analysis, with the follwing command:

	./tstat -ieth1 -l -stest -Nnet.conf -Rrrd.conf -rlocal_dir

where C<local_dir> is the output directory where the RRD database
will be stored and C<rrd.conf> tells Tstat which variables should
be added to the RRD database.
However, whether you plan a longer monitoring, then the log_complete
and the periodical histogram dump can pose serious scalability problems.
In this case, Tstat can be run as a pure RRD engine as in the following
command, where the RRD output directory has been carefully chosen 
in order to be accessible from the Web -- similarly to what our Web
server is actually running:

	./tstat -l -S -Nnet.conf -Rrrd.conf -r/var/www/cgi-bin/rrd_data



=head2 Trace Analysis

Beside live-capture, it is possible to run Tstat on a previously collected 
trace file, where the trace format can be any of the following:

        tcpdump          tcpdump -- Public domain program from LBL
        snoop            Sun Snoop -- Distributed with Solaris
        etherpeek        etherpeek -- Mac sniffer program
        netmetrix        Net Metrix -- Commercial program from HP
        ns               ns -- network simulator from LBL
        netscout         NetScout Manager format
        erf              Endace Extensible Record Format
	
Without loss of generality, we assume to use the first of the above formats.
The calling syntax is almost as before, with the exception of the absence
of the live-capture switch C<-l> and the presence of the name(s) of the file(s)
that have to be processed.
For example, the following command can be used to analyze the 
C<23_00_28_Jun_2000.dump.gz> trace, producing a subdir named C<trace1>, where 
the output of the trace analysis will be stored; as before, C<net.conf> contains 
the subnets that  will be  considered as ``internal'' during the analysis.

	./tstat -stest -Nnet.conf 23_00_28_Jun_2000.dump.gz




=head1 RRD Module


=head2 RRDtool Installation


In order to get Tstat RRD module working, you will need to
install RRDtool first (refer to the homepage of RRDtool 
L<http://people.ee.ethz.ch/~oetiker/webtools/rrdtool> 
to accomplish this step). Then, make sure to specify
that you want native RRD support in Tstat and recompile: basically, you 
will have to uncomment the following lines in C<Makefile.in>, and 
you will  also have to check that the RRDTool version and path 
are coherent with your system settings.

   DEFINES += -DHAVE_RRDTOOL
   RRD_VER     = 1.2.9
   RRD_LDLIBS  = -lrrd
   RRD_LDFLAGS = -L/usr/local/lib/ -L/usr/local/rrdtool/lib/  -L/usr/local/rrdtool-${RRD_VER}/lib/
   RRD_INCS    = -I/usr/local/rrdtool/include/ -I/usr/local/rrdtool-${RRD_VER}/include



=head2 RRD Configuration

RRD configuration is very easy and is moreover centralized
in a single text-file, which allow to specify what quantities
of which variables should be monitored. The operating frequencies
for the RRD sampling (i.e., the parameters for the temporal 
averages) are hard-coded into C<rrdtool.h> and are chosen to 
mimik MRTG behavior.

The RRD configuration file, specified through the C<-R> option 
should contain one line for each of the Tstat parameters that have 
to be integrated into a Round Robin Database. Each line allows to 
specify which statistical properties of the variable has to be tracked,
as follows:

          tstat_var1 avg min max stdev var val:a,b,c,d idx:e,f,g,h prc:i,j,k

where C<avg,min,max,stdev,var,idx,prc> are keywords;
the list of indexes (e.g., TCP ports), values (e.g., packet size)
and percentiles are comma separated. The name of the variables are
shown by executing C<./tstat -H>; valid configuration lines are, e.g.:


          #inspect packet size averge, stdev, specific values and 95th percentile
          ip_len_usc avg stdev val:46,512,1500 prc:95

          #inspect tcp port of index 25 and 80; you could use val:25,80 as well
          tcp_port_syn_src_ent idx:25,80

          #best approximation of rtt distribution
          rtt_avg_usc avg stdev prc:50,90,95,99,99.9

where evidently lines starting with a C<#> sign are treated as comments.
Our webserver is currently running with the following configuration:


	   # This is the RRD database configuration file.
	   # On each line you can specify which measurement will be stored in a
	   # corresponding RRDatabase
	   #
	   # syntax: histogram_name <avg min max stdev idx:i1,i2,... prc:p1,p2,...>
	   # where
	   # histogram_name is the name of the corresponding tstat histogram
	   # avg,stdev: store the average/standard deviation of the measured quantity
	   # min,max: is the minimum/maximum values observed
	   # hit: number of samples in the time interval
	   # idx: specifies values you want to trac; you can use "other" to state all
	   #       except what explicitely declared
	   # prc: specifies quantiles you want to track
	   #
	   #
	   #
	   #=====================================================================
	   #       IP packet length
	   #---------------------------------------------------------------------
	   ip_len_in 			avg prc:50,90,95,99 idx:40,1500,other
	   ip_len_out                      avg prc:50,90,95,99 idx:40,1500,other
	   ip_len_loc                      avg prc:50,90,95,99 idx:40,1500,other
	   #
	   #
	   #
	   #=====================================================================
	   #       IP protocols
	   #---------------------------------------------------------------------
	   #        1 = ICMP, 6 = TCP, 17 = UDP
	   #
	   ip_protocol_in                     idx:1,6,17,other
	   ip_protocol_out                    idx:1,6,17,other
	   ip_protocol_loc                    idx:1,6,17,other
	   #
	   #
	   #=====================================================================
	   #        flow number
	   #---------------------------------------------------------------------
	   #        0 = TCP, 1 = UDP, 2 = RTP 3 = RTCP
	   #
	   flow_number                 idx:0,1,2,3
	   #
	   #
	   #=====================================================================
	   #        TCP well known ports
	   #---------------------------------------------------------------------
	   #        20    FTP-DATA           
	   #        21    FTP                
	   #        22    SSH                
	   #        23    telnet             
	   #        25    SMTP               
	   #        80    HTTP               
	   #        110   POP3
	   #        119   NNTP
	   #        143   IMAP
	   #        443   HTTPS              
	   #        445   Microsoft-ds              
	   #        1214  KaZaa              
	   #        1433  Ms-SQL
	   #        4662  eDonkey-DATA       
	   #        4661  eDonkey-Lookup     
	   #        6881  BitTorrent         
	   #        6699  WinMX              
	   #        8080  Squid              
	   #
	   tcp_port_dst_in       idx:20,21,22,23,25,80,110,119,143,443,445,1214,1433,4661,4662,6881,6699,8080,other
	   tcp_port_dst_out      idx:20,21,22,23,25,80,110,119,143,443,445,1214,1433,4661,4662,6881,6699,8080,other
	   tcp_port_dst_loc      idx:20,21,22,23,25,80,110,119,143,443,445,1214,1433,4661,4662,6881,6699,8080,other
	   #
	   #
	   #=====================================================================
	   #       TCP options
	   #---------------------------------------------------------------------
	   #       TCP sack: 1 = ok, 2 = client set, 3 = server set, 4 = none set
	   #
	   tcp_opts_SACK                 idx:1,2,3,4
	   #
	   #       TCP wscale: 1 = ok, 2 = client set, 3 = server set, 4 = none set
	   #
	   tcp_opts_WS                 idx:1,2,3,4
	   #
	   #       TCP timestamps: 1 = ok, 2 = client set, 3 = server set, 4 = none set
	   #
	   tcp_opts_TS                 idx:1,2,3,4
	   #
	   #
	   #=====================================================================
	   #        TCP rtts
	   #---------------------------------------------------------------------
	   rtt_avg_in                      avg stdev min max prc:50,95,99
	   rtt_avg_out                     avg stdev min max prc:50,95,99
	   rtt_avg_loc                     avg stdev min max prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        TCP connection lenght
	   #---------------------------------------------------------------------
	   tcp_cl_b_s_a2b                  avg max stdev prc:50,95,99
	   tcp_cl_b_s_b2a                  avg max stdev prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        tcp flow holding time
	   #---------------------------------------------------------------------
	   #
	   tcp_tot_time                    avg max stdev prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        Interrupted tcp flow
	   #---------------------------------------------------------------------
	   #
	   tcp_interrupted                 idx:0,1
	   #
	   #
	   #=====================================================================
	   #        tcp flow througput
	   #---------------------------------------------------------------------
	   #
	   tcp_thru_a2b                    avg max stdev prc:50,95,99
	   tcp_thru_b2a                    avg max stdev prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        TCP anomalies  (tstat.h-name)
	   #---------------------------------------------------------------------
	   #        0 IN_SEQUENCE
	   #        1 RETRANSMISSION_RTO
	   #        2 RETRANSMISSION_FR
	   #        3 REORDERING
	   #        4 NETWORK_DUPLICATE
	   #        5 FLOW_CONTROL
	   #        6 UNNECESSARY_RETRANSMISSION_RTO
	   #        7 UNNECESSARY_RETRANSMISSION_FR
	   #       63 UNKNOWN
	   #
	   tcp_anomalies_out   idx:0,1,2,3,4,5,6,7,63
	   tcp_anomalies_in    idx:0,1,2,3,4,5,6,7,63
	   tcp_anomalies_loc    idx:0,1,2,3,4,5,6,7,63
	   #
	   #
	   #=====================================================================
	   #        RTP flow lifetime 
	   #---------------------------------------------------------------------
	   rtp_tot_time_in                 avg max stdev prc:50,95,99
	   rtp_tot_time_out                avg max stdev prc:50,95,99
	   rtp_tot_time_loc                avg max stdev prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        RTP average per flow inter packet delay
	   #---------------------------------------------------------------------
	   rtp_avg_delay_in                 avg max stdev prc:50,95,99
	   rtp_avg_delay_out                avg max stdev prc:50,95,99
	   rtp_avg_delay_loc                avg max stdev prc:50,95,99
	   #
	   #
	   #=====================================================================
	   #        RTP average per flow jitter
	   #---------------------------------------------------------------------
	   rtp_avg_jitter_in                 avg max stdev prc:50,95,99
	   rtp_avg_jitter_out                avg max stdev prc:50,95,99
	   rtp_avg_jitter_loc                avg max stdev prc:50,95,99



=head2 Tstat RRD and the Web 

From the Tstat web site, in the software section, you can
download the most up-to-date version of C<tstat_rrd.cgi>,
which is the CGI script that renders the Web interface.
Here's some basic tips to get it working; if you wander
how to write your own graph templates, then you're probably
skilled enough to get it on your own C<:)>


=head3 Database Structure

The CGI scripts allow to browse on the fly the RRD database structure.
The C<rrd_data> directory is the root of the tree, where each
directory contains either i) other directories (i.e., is a box) 
or ii) a RR-database, in which case the node is a leaf and will be 
shown in the interface. In case that a directory is a plain box, it may
optionally contain some files (specifically 
{C<HEADER>,C<FOOTER>,C<README>}.{C<html>,C<txt>})
that will be rendered by C<tstat_rrd.cgi>. Installation 
instructions and traces descriptions are done this way by our servers


	rrd_data/
	|-- Example
	|-- GARR
	|   |-- garr-live
	|   `-- garr-old
	`-- Polito
	    |-- 2000
	    |   |-- Apr
	    |   |-- Jun
	    |   |-- Jun,post155
	    |   `-- May
	    |-- 2001
	    |   |-- Feb
	    |   `-- Jan
	    |-- 2005
	    |   |-- Apr
	    |   `-- Feb
	    `-- Current
	

From C<tstat_rrd.cgi> itself:

       # every rrd directory may contain a HEADER, a FOOTER and a README
       # files, allowing custom informations to be naturally embedded in
       # each of the traces ``main page'' (i.e., when no parameter has been
       # chosen yet).
       # By default, the cgi tries to load the html version (thus,
       # FILE.html); otherwise, tries to displays "<pre> `cat FILE` </pre>"
       # if such a file exists; finally, it will display a default message
       # held in $default{README} hardcoded in the script


=head3 Web Configuration

Basically, it is advisable to store the Tstat RRD files
everywhere you want, and then create a symbolic link 
named C<rrd_data> that points to it (i.e., to the root of 
the rrd database tree). Similarly for the directory
where the rendered images should be stored (defaults to C<cgi-bin/rrd_images>)
and can be a symbolic link as well.
The names of these symbolic links can be redefined in the 
configuration section of C<tstat_rrd.cgi> if needed:

       #   ____________________________
       #  /                            \
       # /    configuration  __________/
       # \__________________/.:nonsns:.
       #
       # specify path to the root of the rrd database tree
       # by default, I assume there is a symbolic link in cgi-bin/
       # named rrd_data
       $RRD_DATA = 'rrd_data';

       # same thing for image directory
       # in my case, var/www/cgi-bin/rrd_images is
       # a symbolic link to "/var/www/html/rrd_images";
       # from the html browser's perspective
       $IMG_DIR = "rrd_images";



=head3 RRD Parameters

The C<tstat_rrd.cgi> script does a lot of things automatically,
depeding on your use of the interface. Internally, this is
done trough the following parameters.

       # dir=	      the directory where the rrd files are (i.e., a specific trace)
       # var=	      one of Tstat parameters (e.g., rtt_avg_in, ip_len_in, ...)
       # template=    one of (avg|stdev|idx|prc|hit), developed by applyTemplate() below
       # duration=    temporal window size (until end of samples)
       # logscale=    flag; toggle logscale
       # bigpic=      flag; doubles the picture size
       # advopt=      flag; toggle other options, such as:
       #   yauto=     flag; whether to use autoscaling
       #   ymin=      minimum yscale value
       #   ymax=      maximum yscale value
       #
       # NOTE: $RRD_DATA/url_param("dir")/url_param("var").rrd
       # should be an existent file; the script enforce this check
       # by automatically selecting the available templates and
       # neglecting the one that whould cause an error


=head1 Author Informations


Marco Mellia, Assistant Professor.
<marco.mellia@polito.it>

Dario Rossi, PostDoc Researcher.
<dario.rossi@polito.it>


Telecommunication Networks Group (TNG)
DELEN, Politecnico di Torino




=head1 Licence

  Copyright (c) 2001 Politecnico di Torino.  All rights reserved.
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
 
  Tstat is deeply based on TCPTRACE. The authors would like to thank
  Shawn Ostermann for the development of TCPTRACE.

=cut
